using [%=eventNamespace%];
using MassTransit;

namespace [%=namespace%];

public class [%=className%] : MassTransitStateMachine<[%=stateTypeName%]>
{
    public [%=className%]()
    {
        InstanceState(x => x.CurrentState);

		[% for (event in events) { %]
		Event(() => [%=event.name%], x => 
		{
			[%=out.startPreserve("/*", "*/", "eventCorrelation" + event.name, true)%]
			x.CorrelateById();
			[%=out.stopPreserve()%]
		});
		
		[% } %]
		
		[% for (schedule in schedules) { %]
		Schedule(() => [%=schedule.name%], 
            x => x.CorrelationId, 
            x => x.Delay = TimeSpan.FromSeconds([%=schedule.delay%]));
            
		[% } %]
	
		Initially(
			[%=initialTransitions.collect(transition|transition.definition()).concat(", ")%]
		);
		
		[% for (state in states) { %]
		During([%=state.name%],
			[%=state.outgoing.collect(transition|transition.definition()).concat(", ")%]
		);
		
		[% } %]
    }

	[% for (state in states) { %]
	public State [%=state.name%] { get; } = default!;
	[% } %]
	
	[% for (schedule in schedules) { %]
	public Schedule<[%=stateTypeName%], [%=schedule.event.name%]> [%=schedule.name%] { get; } = default!;
	[% } %]
	
	[% for (event in events) { %]
	public Event<[%=event.name%]> [%=event.name%] { get; } = default!;
	[% } %]
}


[%	@template 
	operation Transition definition() { %]
	When([%=self.event.name%])
		[% if(self.to != null) { %]
		.TransitionTo([%=self.to.name%])
		[% } else { %]
		.Finalize()
		[% } %]
[% } %]

