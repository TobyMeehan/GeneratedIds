pre {
	var outDir = "../gen/";
	var idsName = "Ids";
}

//
//	EVENTS
//

rule Ids2EventCsprojs {

	template : "templates/Events/Ids2Csproj.egl"
	
	parameters : Map {}
	
	target : outDir+idsName+".Events/"+idsName+".Events.csproj"

}

rule Ids2Alert {
	
	template : "templates/Events/Ids2Alert.egl"
	
	parameters : Map {
	
		"namespace" = idsName+".Events"
	
	}
	
	target : outDir+idsName+".Events/Alert.cs"
	
}

rule Event2Record transform event : ids::Event {
	
	template : "templates/Events/Event2Record.egl"
	
	parameters : Map {
	
		"namespace" = idsName+".Events.Custom",
		"className" = event.name,
		"fields" = event.fields
	
	}
	
	target : outDir+idsName+".Events/Custom/"+event.name+".cs"
		
}

//
//	MONITOR
//

rule Ids2MonitorCsproj {

	template : "templates/Monitor/Ids2Csproj.egl"
	
	parameters : Map {
	
		"eventProject" = idsName+".Events"
	
	}
	
	target : outDir+idsName+".Monitor/"+idsName+".Monitor.csproj"

}

rule Ids2MonitorDockerfile {

	template : "templates/Monitor/Ids2Dockerfile.egl"
	
	parameters : Map {
	
		"project" = idsName+".Monitor"
	
	}
	
	target : outDir+idsName+".Monitor/Dockerfile"

}

rule Ids2MonitorProgram {

	template : "templates/Monitor/Ids2Program.egl"
	
	parameters : Map {}
	
	target : outDir+idsName+".Monitor/Program.cs"

}

rule Ids2MonitorAppsettings {

	template : "templates/Monitor/Ids2Appsettings.egl"
	
	parameters : Map {}
	
	target : outDir+idsName+".Monitor/appsettings.json"

}

rule StateMachine2Saga transform machine : ids::Attack {
	
	template : "templates/Monitor/StateMachine2Saga.egl"
	
	parameters : Map {
		
		"namespace" = idsName+".Monitor."+machine.name,
		"eventNamespace" = idsName+".Events",
		"customEventNamespace" = idsName+".Events.Custom",
		"sagaEventNamespace" = idsName+".Monitor."+machine.name+".Events",
		"className" = machine.name+"StateMachine",
		"stateTypeName" = machine.name+"State",
		
		"timeout" = machine.timeout,
		"events" = machine.events,
		"states" = machine.states,
		"initialTransitions" = machine.transitions.select(transition|transition.from == null)
		
	}	
	
	target : outDir+idsName+".Monitor/"+machine.name+"/"+machine.name+"StateMachine.cs"
}

rule StateMachine2State transform machine : ids::Attack {

	template : "templates/Monitor/StateMachine2State.egl"
	
	parameters : Map {
	
		"namespace" = idsName+".Monitor."+machine.name,
		"className" = machine.name+"State",
		"fields" = machine.fields
	
	}
	
	target : outDir+idsName+".Monitor/"+machine.name+"/"+machine.name+"State.cs"
	
}

rule StateMachine2TimeoutEvent transform machine : ids::Attack {

	template : "templates/Monitor/StateMachine2TimeoutEvent.egl"
	
	parameters : Map {
		
		"namespace" = idsName+".Monitor."+machine.name+".Events"
		
	}
	
	target : outDir+idsName+".Monitor/"+machine.name+"/Events/Timeout.cs"

}

//
//	SENSOR
//

rule Ids2SensorCsproj {

	template : "templates/Sensor/Ids2Csproj.egl"
	
	parameters : Map {
	
		"eventProject" = idsName+".Events"
	
	}
	
	target : outDir+idsName+".Sensor/"+idsName+".Sensor.csproj"

}

rule Ids2SensorDockerfile {

	template : "templates/Sensor/Ids2Dockerfile.egl"
	
	parameters : Map {
	
		"project" = idsName+".Sensor"
		
	}
	
	target : outDir+idsName+".Sensor/Dockerfile"
	
}

rule Ids2SensorProgram {

	template : "templates/Sensor/Ids2Program.egl"
	
	parameters : Map {

		"namespace" = idsName+".Sensor"

	}
	
	target : outDir+idsName+".Sensor/Program.cs"

}

rule Ids2SensorAppsettings {

	template : "templates/Sensor/Ids2Appsettings.egl"
	
	parameters : Map {}
	
	target : outDir+idsName+".Sensor/appsettings.json"

}

rule Ids2IPacketMatch {

	template : "templates/Sensor/Ids2IPacketMatch.egl"
	
	parameters : Map {
	
		"namespace" = idsName+".Sensor"
	
	}
	
	target : outDir+idsName+".Sensor/IPacketMatch.cs"

}

rule Ids2PacketMatch {

	template : "templates/Sensor/Ids2PacketMatch.egl"
	
	parameters : Map {
	
		"namespace" = idsName+".Sensor",
		"eventNamespace" = idsName+".Events.Custom",
		"events" = Event.allInstances()
	}
	
	target : outDir+idsName+".Sensor/PacketMatch.cs"

}

rule Ids2PcapHostedService {

	template : "templates/Sensor/Ids2PcapHostedService.egl"
	
	parameters : Map {
	
		"namespace" = idsName+".Sensor"
	
	}
	
	target : outDir+idsName+".Sensor/PcapHostedService.cs"

}